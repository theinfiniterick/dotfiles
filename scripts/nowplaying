#!/bin/sh

# Dependencies: jq, libnotify

DEBUG=1

# last.fm api key
API_KEY="11353ee2e14240f46be72d71726f3f79"

# mpd music directory
MPD_MUSIC_DIRECTORY="$HOME/music"

function track_listen() {

	while mpc -q idle; do

		track_state=$(mpc status | grep -oP "^\[.*\]" | tr -d "[]")
		track_id=$(mpc current -f "[%id%]")

		# if state is changed to 'playing'
		if [ "$track_state" != "$prev_track_state" ] && [ "$track_state" = "playing"  ]; then
			track_notify
		# else if track id changes
		elif [ "$track_id" != "$prev_track_id" ]; then
			track_notify
		fi

		prev_track_state=$track_state
		prev_track_id=$track_id

	done

}

function track_notify() {

	# gather track metadata
	local track_data=`mpc current -f '[%title%]@!@[%artist%]@!@[%album%]@!@[%date%]@!@[%time%]@!@[%file%]'`

	if [ -n "$track_data" ]; then
		
		local title artist album date length filepath folder filename image search_string json_url image_url time message

		# parse track data
		title=$(awk -F'@!@' '{print $1}' <<< $track_data)
		artist=$(awk -F'@!@' '{print $2}' <<< $track_data)
		album=$(awk -F'@!@' '{print $3}' <<< $track_data)
		date=$(awk -F'@!@' '{print $4}' <<< $track_data)
		length=$(awk -F'@!@' '{print $5}' <<< $track_data)
		filepath="$MPD_MUSIC_DIRECTORY/$(awk -F'@!@' '{print $6}' <<< $track_data)"
		folder="${filepath%/*}"
		filename=$(basename "$filepath")

		# locate local album cover image
		if [ -f "$folder/cover.png" ]; then
			image="$folder/cover.png"
		elif [ -f "$folder/cover.jpg" ]; then
			image="$folder/cover.jpg"
		fi

		# if title, artist, album or image have a null value then grab data from deezer
		if [ -z "$title" ] || [ -z "$artist" ] || [ -z "$album" ] || [ -z "$image" ]; then

			# if old image exists then remove it
			if [ -f $HOME/.cache/nowplaying.png ]; then
				rm $HOME/.cache/nowplaying.png
			fi

			# if old json data exists then remove it
			if [ -f $HOME/.cache/nowplaying.json ]; then
				rm $HOME/.cache/nowplaying.json
			fi

			# create search string based on available data
			if [ -n "$artist" ] && [ -n "$title" ] && [ -n "$album" ]; then
				search_string="&track=${title}&artist=${artist}&album=${album}"
			elif [ -n "$artist" ] && [ -n "$title" ]; then
				search_string="&track=${title}&artist=${artist}"
			else
				artist=$(awk -F' - ' '{print $1}' <<< $filename)
				title=$(awk -F' - ' '{print $2}' <<< $filename | sed 's/.mp3$//g')
				search_string="&track=${title}&artist=${artist}"
			fi

			# replace spaces with html space codes
			search_string=$(sed 's/\s/%20/g' <<< $search_string)

			# compile json url string
			json_url="https://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key=${API_KEY}&format=json${search_string}"

			# download json data
			curl -o $HOME/.cache/nowplaying.json -s $json_url

			# if no track title then get from json
			if [ -z "$title" ]; then
				title=$(jq '.track.name' $HOME/.cache/nowplaying.json | tr -d '"')
			fi

			# if no artist then get from json
			if [ -z "$artist" ]; then
				artist=$(jq '.track.artist.name' $HOME/.cache/nowplaying.json | tr -d '"')
			fi

			# if no album then get from json
			if [ -z "$album" ]; then
				album=$(jq '.track.album.title' $HOME/.cache/nowplaying.json | tr -d '"')
			fi

			# if no image then get image url from json and download
			if [ -z "$image" ]; then
				image_url=$(jq '.track.album.image[2]."#text"' $HOME/.cache/nowplaying.json | tr -d '"')
				if [ "$image_url" != "null" ]; then
					curl -o $HOME/.cache/nowplaying.png -s $image_url
					image="$HOME/.cache/nowplaying.png"
				else
					image="nowplaying"
				fi
			fi

		fi

		# get current track time
		time=$(mpc | grep -oP '[0-9]{1,2}:[0-9]{1,2}/' | tr -d '/')

		# add track title to message
		message="<span foreground='#FFFFCC'>${title}</span> <span foreground='#CCCCCC'>(</span>${time}<span foreground='#CCCCCC'>/</span>${length}<span foreground='#CCCCCC'>)</span>"
	
		# if artist exists then add to message
		if [ -n "$artist" ]; then
			message+="\n<span foreground='#CCCCCC'>by</span> ${artist}"
		fi

		# if album exists then add to message
		if [ -n "$album" ]; then
			message+="\n<span foreground='#CCCCCC'>on</span> ${album}"
		fi

		# if date exists then add to message
		if [ -n "$date" ]; then
			message+=" <span foreground='#CCCCCC'>(</span>${date}<span foreground='#CCCCCC'>)</span>"
		fi

		if [ "$DEBUG" = "1" ]; then
			echo ""
			echo "   track_data = $track_data"
			echo ""
			echo "search_string = $search_string"
			echo "     json_url = $json_url"
			echo "    image_url = $image_url"
			echo ""
			echo "        title = $title"
			echo "       artist = $artist"
			echo "        album = $album"
			echo "        image = $image"
			echo "         time = $time"
			echo ""
			echo "         path = $path"
			echo "       folder = $folder"
			echo "     filename = $filename"
			echo ""
		fi

		notify-send -a nowplaying -i "$image" -u normal -t 2500 "nowplaying" "$message"

	fi

}

if [ "$1" = "--listen" ]; then
	track_listen
elif [ "$1" = "--notify" ]; then
	track_notify
fi
