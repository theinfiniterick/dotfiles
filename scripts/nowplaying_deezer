#!/bin/sh

TEXT_COLOR_HIGHLIGHT=$(tput setaf 231)
TEXT_COLOR_DIM=$(tput setaf 245)
TEXT_COLOR_RESET=$(tput sgr0)

MPD_MUSIC_DIRECTORY="/home/user/music"

function track_listen() {

	while mpc -q idle; do

		track_state=$(mpc status | grep -oP "^\[.*\]" | tr -d "[]")
		track_id=$(mpc current -f "[%id%]")

		if [ "$track_state" != "$prev_track_state" ] && [ "$track_state" = "playing"  ]; then
			# notify if state changes to playing
			current_track --notify
		elif [ "$track_id" != "$prev_track_id" ]; then
			# notify if track id changes
			current_track --notify
		fi

		prev_track_state=$track_state
		prev_track_id=$track_id

	done

}

function current_track() {

	# gather track data
	local track_data=$(mpc current -f '[%title%]@!@[%artist%]@!@[%album%]@!@[%date%]@!@[%time%]@!@[%file%]')

	# parse track data
	local title=$(awk -F'@!@' '{print $1}' <<< $track_data)
	local artist=$(awk -F'@!@' '{print $2}' <<< $track_data)
	local album=$(awk -F'@!@' '{print $3}' <<< $track_data)
	local date=$(awk -F'@!@' '{print $4}' <<< $track_data)
	local length=$(awk -F'@!@' '{print $5}' <<< $track_data)
	local filepath="$MPD_MUSIC_DIRECTORY/$(awk -F'@!@' '{print $6}' <<< $track_data)"
	local folder="${filepath%/*}"
	local filename=$(basename "$filepath")

	local image search_string json_url image_url

	# locate album cover image
	if [ -f "$folder/cover.png" ]; then
		image="$folder/cover.png"
	elif [ -f "$folder/cover.jpg" ]; then
		image="$folder/cover.jpg"
	fi

	if [[ ! "$@" =~ "--notify" ]]; then
		image="null"
	fi

	# if title, artist, album or image have a null value then grab data from deezer
	if [ -z "$title" ] || [ -z "$artist" ] || [ -z "$album" ] || [ -z "$image" ]; then

		if [ -n "$artist" ] && [ -n "$title" ] && [ -n "$album" ]; then
			search_string="${title}%20${artist}%20${album}"
		elif [ -n "$artist" ] && [ -n "$title" ]; then
			search_string="${title}%20${artist}"
		else
			search_string=$(sed 's/.mp3$//g' <<< $filename)
		fi

		# replace spaces with html space codes (%20)
		search_string=$(sed 's/\s-\s/%20/g; s/\s/%20/g' <<< $search_string)

		json_url="http://api.deezer.com/search/autocomplete?q=$search_string"
	
		if [ -f /home/user/.cache/nowplaying.jpg ]; then
			rm /home/user/.cache/nowplaying.jpg
		fi

		if [ -f /home/user/.cache/nowplaying.json ]; then
			rm /home/user/.cache/nowplaying.json
		fi

		curl -o /home/user/.cache/nowplaying.json -s $json_url

		if [ -z "$title" ]; then
			title=$(sed 's/"//g' <<< $(jq '.tracks.data[0].title' /home/user/.cache/nowplaying.json))
		fi

		if [ -z "$artist" ]; then
			artist=$(sed 's/"//g' <<< $(jq '.tracks.data[0].artist.name' /home/user/.cache/nowplaying.json))
		fi

		if [ -z "$album" ]; then
			album=$(sed 's/"//g' <<< $(jq '.tracks.data[0].album.title' /home/user/.cache/nowplaying.json))
		fi

		if [ -z "$image" ]; then
			image_url=$(sed 's/"//g' <<< $(jq '.tracks.data[0].album.cover_medium' /home/user/.cache/nowplaying.json))
			if [ "$image_url" != "null" ]; then
				curl -o /home/user/.cache/nowplaying.jpg -s $image_url
				image="/home/user/.cache/nowplaying.jpg"
			else
				image="nowplaying"
			fi
		fi

		if [ "$debug" = "1" ]; then
			echo ""
			echo "   track_data = $track_data"
			echo ""
			echo "search_string = $search_string"
			echo "     json_url = $json_url"
			echo "    image_url = $image_url"
			echo ""
			echo "        title = $title"
			echo "       artist = $artist"
			echo "        album = $album"
			echo "        image = $image"
			echo ""
			echo "         path = $path"
			echo "       folder = $folder"
			echo "     filename = $filename"
			echo ""
		fi

	fi

	# get track current time
	local time=$(mpc | head -n 2 | tail -n 1 | awk '{print $3}' | awk -F/ '{print $1}')

	# add track title to message
	local message="${TEXT_COLOR_HIGHLIGHT}${title} ${TEXT_COLOR_RESET}${TEXT_COLOR_DIM}(${TEXT_COLOR_RESET}$time${TEXT_COLOR_DIM}/${TEXT_COLOR_RESET}$length${TEXT_COLOR_DIM})${TEXT_COLOR_RESET}"
	local nmessage="__HIGHLIGHT__${title}__END__ __DIM__(__END__${time}__DIM__/__END__${length}__DIM__)__END__"
	
	# if artist exists then append to message
	if [ -n "$artist" ]; then
		message+="\n${TEXT_COLOR_DIM}by${TEXT_COLOR_RESET} $artist"
		nmessage+="\n__DIM__by__END__ ${artist}"
	fi

	# if album exists then append to message
	if [ -n "$album" ]; then
		message+="\n${TEXT_COLOR_DIM}on${TEXT_COLOR_RESET} $album"
		nmessage+="\n__DIM__on__END__ ${album}"
	fi

	# if date exists then append to message
	if [ -n "$date" ]; then
		message+=" ${TEXT_COLOR_DIM}(${TEXT_COLOR_RESET}$date${TEXT_COLOR_DIM})${TEXT_COLOR_RESET}"
		nmessage+=" __DIM__(__END__${date}__DIM__)__END__"
	fi

	# if event is a notification..
	if [[ "$@" =~ "--notify" ]]; then

		# send notification = notify-send -a nowplaying -i $image -u normal -t 2500 "nowplaying "$nmessage"
		notification "nowplaying" "$image" "normal" "default" "nowplaying" "$nmessage"
		
	else

		# output message
		echo -e $message

	fi

}

if [[ "$@" =~ "--debug" ]]; then
	debug=1
fi

case $1 in
	"listen"|"--listen")
		track_listen
		;;
	"current"|"--current"|"-c"|"")
		current_track $2
		;;
	"notify"|"--notify"|"-n")
		current_track --notify $2
		;;
esac
